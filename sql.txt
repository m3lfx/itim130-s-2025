Structured Query Language 
SELECT 
INSERT
UPDATE
DELETE

INSERT INTO table_name (col1, col2, coln)
VALUES('val1', 2, NULL);

INSERT INTO items(item_id, name, cost_price, sell_price, quantity, supplier_name)
VALUES(1, 'computer', 12.34, 15.00, 10, 'apple');

SELECT * FROM table_name;

SELECT * FROM items;

INSERT INTO items( name, cost_price, sell_price, quantity, supplier_name)
VALUES('laptop', 5.67, 8.90, 10, 'acer');

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'coca cola'), 
('biscuits', 4, 5, 90, 'skyflakes'), 
('bottled water', 4, 6, 80, 'tubig'),
('tocino', 3, 5, 15, 'taguigs best')

SELECT item_id, name, sell_price FROM items;

SELECT item_id, name, sell_price 
FROM items
ORDER BY name DESC;

SELECT item_id, name, sell_price 
FROM items
ORDER BY sell_price DESC;

fetch top 3 expensive items
SELECT item_id, name, sell_price 
FROM items
LIMIT 3,2
ORDER BY sell_price DESC

SELECT item_id, name, sell_price, cost_price
FROM items

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'pepsi')

//distinct

SELECT DISTINCT name, cost_price
FROM items;

SELECT  DISTINCT name, supplier_name
FROM items;

//column alias

SELECT  name AS product, supplier_name AS supplier
FROM items;

SELECT  name AS `product name`, supplier_name AS 'supplier name'
FROM items;

conditional statements

SELECT *
FROM items
WHERE name = 'softdrinks';

items selling price is greater than 5
SELECT *
FROM items
WHERE sell_price >= 5 
ORDER BY sell_price DESC
LIMIT 3;

fetch items that has cost price is greater than 3 and sell_price is less than 8
SELECT *
FROM items
WHERE cost_price > 3 OR sell_price < 8 
ORDER BY sell_price DESC
LIMIT 3;

fetch items from supplier pepsi that has cost_price > 5
SELECT supplier_name, name, cost_price
FROM items
WHERE supplier_name = 'pepsi' and cost_price >= 5

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('tuna', 5, 6, 100, NULL);

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES(1, 5, 6, 100, NULL);

select supplier_name
from items
WHERE supplier_name IS NOT NULL;

select supplier_name
from items
WHERE supplier_name != 'PEPSI';

select supplier_name
from items
WHERE  BINAY supplier_name = 'PEPSI';

fetch items that has a 's' on their name
SELECT * 
FROM items
WHERE name LIKE '%s%';

INSERT INTO `customers` (`first_name`, `last_name`, `address`, `city`, `phone`) VALUES
('Jenny', 'Stones', '27 Rowan Avenue', 'Hightown',  '023 9876'),
('Andrew', 'Stones', '52 The Willows', 'Lowtown',  '876 3527'),
('Alex', 'Matthew', '4 The Street', 'Nicetown',  '010 4567'),
('Adrian', 'Matthew', 'The Barn', 'Yuleville',  '487 3871'),
('Simon', 'Cozens', '7 Shady Lane', 'Oakenham',  '514 5926'),
('Neil', 'Matthew', '5 Pasture Lane', 'Nicetown',  '267 1232'),
('Richard', 'Stones', '34 Holly Way', 'Bingham',  '342 5982'),
('Ann', 'Stones', '34 Holly Way', 'Bingham', '342 5982'),
('Christine', 'Hickman', '36 Queen Street', 'Histon',  '342 5432'),
('Mike', 'Howard', '86 Dysart Street', 'Tibsville',  '505 5482'),
('Dave', 'Jones', '54 Vale Rise', 'Bingham',  '342 8264'),
('Richard', 'Neill', '42 Thatched Way', 'Winnersby',  '505 6482'),
('Laura', 'Hardy', '73 Margarita Way', 'Oxbridge',  '821 2335'),
('Bill', 'O\'Neill', '2 Beamer Street', 'Welltown',  '435 1234'),
('David', 'Hudson', '4 The Square', 'Milltown',  '961 4526');

select customer with first name that has exactly four characters

SELECT * FROM customers
WHERE first_name LIKE '____'

fetch customers having first names that has an 'e' as second character.
SELECT * FROM customers
WHERE first_name LIKE '_e%'

fetch customers from Bingham or nicetown
SELECT last_name, city FROM customers
WHERE city = 'bingham' or city = 'nicetown' or city = 'hightown'

IN Clause

SELECT last_name, city FROM customers
WHERE BINARY city IN ('bingham', 'nicetown', 'Hightown')

SELECT customer_id, last_name, city FROM customers
WHERE customer_id IN  (1, 2, 3, 4, 5)

SELECT customer_id, last_name, city FROM customers
WHERE customer_id >= 1 AND customer_id <= 5

BETWEEN 
SELECT customer_id, last_name, city FROM customers
WHERE customer_id  BETWEEN 5 AND 3

SELECT customer_id, last_name, city FROM customers
WHERE city  BETWEEN 'A' AND 'N'

orders rows
INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES('2025-05-15', NULL, 'processing', 15);

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), NULL, 'processing', 2);


select DATE_FORMAT(now(), '%D of %M %Y %H:%i.%s %p')
SELECT order_id, DATE_FORMAT(date_ordered, '%D \tof %M %Y') FROM orders;

select DAYNAME(date_add(curdate(), INTERVAL 5000 year))

SELECT dayname(date_add(curdate(), INTERVAL-20 DAY))

SELECT DATE_FORMAT(date_add(now(), INTERVAL 100 DAY), '%a, %D of %M %Y')

SELECT date_add(now(), INTERVAL-200 YEAR)

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), DATE_ADD(now(), INTERVAL 5 DAY), 'processing', 15);

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(1, 1, 1), (1, 2, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(3, 5, 1), (3, 6, 1), (3, 3, 2)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(4, 1, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(5, 1, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(6, 5, 1), (6, 6, 1), (6, 3, 2)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(7, 1, 1), (7, 2, 1), (7, 3, 2), (7, 4, 5), (7, 5, 10), (7, 6, 3)

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), DATE_ADD(now(), INTERVAL 5 DAY), 'processing', 15);

SELECT MAX(order_id) from orders
INSERT INTO orderline (order_id, item_id, quantity)
VALUES(LAST_INSERT_ID(), 1, 1)

UPDATE

UPDATE orders SET date_delivery = '2025-06-30', status = "delivered" 
WHERE order_id = 1

UPDATE orders SET date_delivery = now(), status = "delivered" 
WHERE order_id IN (3, 4)

UPDATE orders SET date_delivery = DATE_ADD(date_ordered, INTERVAL 5 DAY), status = "delivered" 
WHERE order_id = 5

UPDATE items SET supplier_name = "coca cola"

DELETE 
DELETE FROM items WHERE item_id = 1

DELETE FROM orderline WHERE item_id = 1

CREATE TABLE IF NOT EXISTS `db_sales_s_2025`.`products` (
  `product_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `cost_price` DECIMAL(3,2) NULL,
  `sell_price` DECIMAL(3,2) NULL,
  `quantity` INT NULL,
  `supplier_name` VARCHAR(45) NULL,
  PRIMARY KEY (`product_id`))

  INSERT INTO products(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'coca cola'), 
('biscuits', 4, 5, 90, 'skyflakes'), 
('bottled water', 4, 6, 80, 'tubig'),
('tocino', 3, 5, 15, 'taguigs best')

table join


SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id

fetch all orders with their customers that are processing

SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND orders.status = 'processing'

update order date 
UPDATE orders SET date_ordered = '2025-06-01' where order_id = 1

fetch orders for the month of may
SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND orders.status = 'processing'

SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND date_ordered >= '2025-05-01' AND date_ordered <= '2025-05-31'

SELECT c.customer_id, c.last_name, o.order_id, o.date_ordered, o.status 
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

FETCH ORDERS for month of june
SELECT c.customer_id, c.last_name, o.order_id, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), o.status 
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND monthname(o.date_ordered) = 'june'

SELECT c.customer_id, c.last_name, o.order_id, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), o.status 
FROM  customers c, orders o