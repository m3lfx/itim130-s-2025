Structured Query Language 
SELECT 
INSERT
UPDATE
DELETE

INSERT INTO table_name (col1, col2, coln)
VALUES('val1', 2, NULL);

INSERT INTO items(item_id, name, cost_price, sell_price, quantity, supplier_name)
VALUES(1, 'computer', 12.34, 15.00, 10, 'apple');

SELECT * FROM table_name;

SELECT * FROM items;

INSERT INTO items( name, cost_price, sell_price, quantity, supplier_name)
VALUES('laptop', 5.67, 8.90, 10, 'acer');

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'coca cola'), 
('biscuits', 4, 5, 90, 'skyflakes'), 
('bottled water', 4, 6, 80, 'tubig'),
('tocino', 3, 5, 15, 'taguigs best')

SELECT item_id, name, sell_price FROM items;

SELECT item_id, name, sell_price 
FROM items
ORDER BY name DESC;

SELECT item_id, name, sell_price 
FROM items
ORDER BY sell_price DESC;

fetch top 3 expensive items
SELECT item_id, name, sell_price 
FROM items
LIMIT 3,2
ORDER BY sell_price DESC

SELECT item_id, name, sell_price, cost_price
FROM items

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'pepsi')

//distinct

SELECT DISTINCT name, cost_price
FROM items;

SELECT  DISTINCT name, supplier_name
FROM items;

//column alias

SELECT  name AS product, supplier_name AS supplier
FROM items;

SELECT  name AS `product name`, supplier_name AS 'supplier name'
FROM items;

conditional statements

SELECT *
FROM items
WHERE name = 'softdrinks';

items selling price is greater than 5
SELECT *
FROM items
WHERE sell_price >= 5 
ORDER BY sell_price DESC
LIMIT 3;

fetch items that has cost price is greater than 3 and sell_price is less than 8
SELECT *
FROM items
WHERE cost_price > 3 OR sell_price < 8 
ORDER BY sell_price DESC
LIMIT 3;

fetch items from supplier pepsi that has cost_price > 5
SELECT supplier_name, name, cost_price
FROM items
WHERE supplier_name = 'pepsi' and cost_price >= 5

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES('tuna', 5, 6, 100, NULL);

INSERT INTO items(name, cost_price, sell_price, quantity, supplier_name)
VALUES(1, 5, 6, 100, NULL);

select supplier_name
from items
WHERE supplier_name IS NOT NULL;

select supplier_name
from items
WHERE supplier_name != 'PEPSI';

select supplier_name
from items
WHERE  BINAY supplier_name = 'PEPSI';

fetch items that has a 's' on their name
SELECT * 
FROM items
WHERE name LIKE '%s%';

INSERT INTO `customers` (`first_name`, `last_name`, `address`, `city`, `phone`) VALUES
('Jenny', 'Stones', '27 Rowan Avenue', 'Hightown',  '023 9876'),
('Andrew', 'Stones', '52 The Willows', 'Lowtown',  '876 3527'),
('Alex', 'Matthew', '4 The Street', 'Nicetown',  '010 4567'),
('Adrian', 'Matthew', 'The Barn', 'Yuleville',  '487 3871'),
('Simon', 'Cozens', '7 Shady Lane', 'Oakenham',  '514 5926'),
('Neil', 'Matthew', '5 Pasture Lane', 'Nicetown',  '267 1232'),
('Richard', 'Stones', '34 Holly Way', 'Bingham',  '342 5982'),
('Ann', 'Stones', '34 Holly Way', 'Bingham', '342 5982'),
('Christine', 'Hickman', '36 Queen Street', 'Histon',  '342 5432'),
('Mike', 'Howard', '86 Dysart Street', 'Tibsville',  '505 5482'),
('Dave', 'Jones', '54 Vale Rise', 'Bingham',  '342 8264'),
('Richard', 'Neill', '42 Thatched Way', 'Winnersby',  '505 6482'),
('Laura', 'Hardy', '73 Margarita Way', 'Oxbridge',  '821 2335'),
('Bill', 'O\'Neill', '2 Beamer Street', 'Welltown',  '435 1234'),
('David', 'Hudson', '4 The Square', 'Milltown',  '961 4526');

select customer with first name that has exactly four characters

SELECT * FROM customers
WHERE first_name LIKE '____'

fetch customers having first names that has an 'e' as second character.
SELECT * FROM customers
WHERE first_name LIKE '_e%'

fetch customers from Bingham or nicetown
SELECT last_name, city FROM customers
WHERE city = 'bingham' or city = 'nicetown' or city = 'hightown'

IN Clause

SELECT last_name, city FROM customers
WHERE BINARY city IN ('bingham', 'nicetown', 'Hightown')

SELECT customer_id, last_name, city FROM customers
WHERE customer_id IN  (1, 2, 3, 4, 5)

SELECT customer_id, last_name, city FROM customers
WHERE customer_id >= 1 AND customer_id <= 5

BETWEEN 
SELECT customer_id, last_name, city FROM customers
WHERE customer_id  BETWEEN 5 AND 3

SELECT customer_id, last_name, city FROM customers
WHERE city  BETWEEN 'A' AND 'N'

orders rows
INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES('2025-05-15', NULL, 'processing', 15);

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), NULL, 'processing', 2);


select DATE_FORMAT(now(), '%D of %M %Y %H:%i.%s %p')
SELECT order_id, DATE_FORMAT(date_ordered, '%D \tof %M %Y') FROM orders;

select DAYNAME(date_add(curdate(), INTERVAL 5000 year))

SELECT dayname(date_add(curdate(), INTERVAL-20 DAY))

SELECT DATE_FORMAT(date_add(now(), INTERVAL 100 DAY), '%a, %D of %M %Y')

SELECT date_add(now(), INTERVAL-200 YEAR)

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), DATE_ADD(now(), INTERVAL 5 DAY), 'processing', 15);

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(1, 1, 1), (1, 2, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(3, 5, 1), (3, 6, 1), (3, 3, 2)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(4, 1, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(5, 1, 1)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(6, 5, 1), (6, 6, 1), (6, 3, 2)

INSERT INTO orderline (order_id, item_id, quantity)
VALUES(7, 1, 1), (7, 2, 1), (7, 3, 2), (7, 4, 5), (7, 5, 10), (7, 6, 3)

INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), DATE_ADD(now(), INTERVAL 5 DAY), 'processing', 15);

SELECT MAX(order_id) from orders
INSERT INTO orderline (order_id, item_id, quantity)
VALUES(LAST_INSERT_ID(), 1, 1)

UPDATE

UPDATE orders SET date_delivery = '2025-06-30', status = "delivered" 
WHERE order_id = 1

UPDATE orders SET date_delivery = now(), status = "delivered" 
WHERE order_id IN (3, 4)

UPDATE orders SET date_delivery = DATE_ADD(date_ordered, INTERVAL 5 DAY), status = "delivered" 
WHERE order_id = 5

UPDATE items SET supplier_name = "coca cola"

DELETE 
DELETE FROM items WHERE item_id = 1

DELETE FROM orderline WHERE item_id = 1

CREATE TABLE IF NOT EXISTS `db_sales_s_2025`.`products` (
  `product_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `cost_price` DECIMAL(3,2) NULL,
  `sell_price` DECIMAL(3,2) NULL,
  `quantity` INT NULL,
  `supplier_name` VARCHAR(45) NULL,
  PRIMARY KEY (`product_id`))

  INSERT INTO products(name, cost_price, sell_price, quantity, supplier_name)
VALUES('softdrinks', 5, 6, 100, 'coca cola'), 
('biscuits', 4, 5, 90, 'skyflakes'), 
('bottled water', 4, 6, 80, 'tubig'),
('tocino', 3, 5, 15, 'taguigs best')

table join


SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id

fetch all orders with their customers that are processing

SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND orders.status = 'processing'

update order date 
UPDATE orders SET date_ordered = '2025-06-01' where order_id = 1

fetch orders for the month of may
SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND orders.status = 'processing'

SELECT customers.customer_id, customers.last_name, orders.order_id, orders.date_ordered, orders.status 
FROM customers, orders 
WHERE customers.customer_id = orders.customer_id
AND date_ordered >= '2025-05-01' AND date_ordered <= '2025-05-31'

SELECT c.customer_id, c.last_name, o.order_id, o.date_ordered, o.status 
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

FETCH ORDERS for month of june
SELECT c.customer_id, c.last_name, o.order_id, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), o.status 
FROM customers c, orders o
WHERE c.customer_id = o.customer_id
AND monthname(o.date_ordered) = 'june'

SELECT c.customer_id, c.last_name, o.order_id, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), o.status 
FROM  customers c, orders o

insert items ordered 
INSERT INTO orderline(order_id, item_id, quantity) VALUES(1,13,1);

INSERT INTO orderline(order_id, item_id, quantity) VALUES(3,14,10), (3,16,2) ;

items 13-17
INSERT INTO orderline(order_id, item_id, quantity) VALUES(4,15,5), (4,16,5), (4,17,3), (4,13,5) ;

INSERT INTO orderline(order_id, item_id, quantity) VALUES(5,13, 5), (5,17,5), (6,17,3), (6,13,5), (7,15,12), (8,13,5), (8,16,5)

fetch all customers and their orders with the items
SELECT o.order_id, c.last_name, c.address, o.date_ordered, ol.item_id, ol.quantity
FROM customers c, orders o, orderline ol 
WHERE c.customer_id = o.customer_id 
AND o.order_id = ol.order_id

SELECT o.order_id, c.last_name, c.address, o.date_ordered, ol.item_id, i.name, ol.quantity
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id 
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id

fetch the order history of a customer;
SELECT o.order_id, c.last_name, c.address, o.date_ordered, ol.item_id, i.name, ol.quantity
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id 
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.last_name = 'hudson'
ORDER BY o.order_id

SELECT o.order_id, c.last_name, c.address, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), ol.item_id, i.name, ol.quantity
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id 
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.customer_id = 15
ORDER BY o.order_id

fetch all customers from nicetown or bingham and the items they ordered

SELECT o.order_id, c.last_name, c.address, c.city, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), ol.item_id, i.name, ol.quantity
FROM customers c, orders o, orderline ol, items i
WHERE c.customer_id = o.customer_id 
AND o.order_id = ol.order_id
AND i.item_id = ol.item_id
AND c.city IN ('nicetown', 'bingham', 'milltown')

SELECT o.order_id, c.last_name, c.address, c.city, o.date_ordered, ol.item_id, i.name, ol.quantity
FROM customers c INNER JOIN orders o ON(c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE c.city IN ('nicetown', 'bingham')

items inner join orderline inner join orders inner join customers

SELECT o.order_id, c.last_name, c.address, DATE_FORMAT(o.date_ordered, '%D of %M %Y'), ol.item_id, i.name, ol.quantity
FROM customers c INNER JOIN orders o ON(c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE c.customer_id = 15
ORDER BY o.order_id

fetch all items that were bought on may 2025.

SELECT i.name, o.date_ordered, ol.quantity 
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE o.date_ordered BETWEEN '2025-05-01' AND '2025-05-31'

#WHERE monthname(o.date_ordered) = 'may'

what items are being bought in bulk (10 or more items)

SELECT i.name,  ol.quantity 
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
WHERE ol.quantity >= 10

what items that were delivered on may to milltown,
SELECT c.city, i.name, ol.quantity 
FROM customers c INNER JOIN orders o ON(c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE c.city = 'milltown' AND o.date_delivery BETWEEN '2025-05-01' AND '2025-05-31' 

top 1 selling items from milltown for the month of may
SELECT c.city, i.name, ol.quantity 
FROM customers c INNER JOIN orders o ON(c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE c.city = 'milltown' AND o.date_delivery BETWEEN '2025-05-01' AND '2025-05-31'
ORDER BY quantity DESC
LIMIT 1

aggregate functions 

total customers 
SELECT count(*) FROM customers;

SELECT count(last_name) FROM customers;

UPDATE customers SET phone = NULL
WHERE customer_id = 1

SELECT count(phone) FROM customers;

total items sold

SELECT sum(quantity) FROM orderline

total income
order_total = order_total + (sell_price * quantity) 
sum(sell_price * quantity)

SELECT sum(i.sell_price * ol.quantity)
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)

select i.name, max(ol.quantity) as qty
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)


get grand total of a specific order 
SELECT o.order_id, c.first_name, sum(i.sell_price * ol.quantity)
FROM customers c INNER JOIN orders o ON(c.customer_id = o.customer_id) 
INNER JOIN orderline ol ON (o.order_id = ol.order_id) INNER JOIN items i on (i.item_id = ol.item_id)
WHERE o.order_id = 8

GROUP BY clause

count number of customers per city
SELECT city, count(*) FROM customers
GROUP BY city
;
count the number of orders for each month for this year
SELECT monthname(date_ordered), count(date_ordered)
FROM orders
GROUP BY month(date_ordered)

get the total quantity sold for each item.
SELECT i.item_id, i.name, sum(ol.quantity)
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY i.item_id



get the total for each order
SELECT ol.order_id, sum(ol.quantity * i.sell_price) AS total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY ol.order_id

get the customer name and total payment

SELECT concat(first_name, " ", last_name) as `customer name`, ol.order_id, sum(ol.quantity * i.sell_price) AS total
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id)
INNER JOIN orderline ol ON (o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY o.order_id  

how much did each customer spend on our store
SELECT concat(first_name, " ", last_name) as `customer name`, sum(ol.quantity * i.sell_price) AS total
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id)
INNER JOIN orderline ol ON (o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY c.first_name, c.last_name
ORDER BY total DESC

get the profit for each product
SELECT  ol.item_id, i.name, sum(ol.quantity * i.sell_price) AS total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY ol.item_id


top 3 best selling items
SELECT  ol.item_id, i.name, sum(ol.quantity * i.sell_price) AS total
FROM items i INNER JOIN orderline ol ON (i.item_id = ol.item_id)
GROUP BY ol.item_id
ORDER BY total DESC
LIMIT 3

get the profit for each city
SELECT c.city, sum(ol.quantity * i.sell_price) AS total
FROM customers c INNER JOIN orders o ON (c.customer_id = o.customer_id)
INNER JOIN orderline ol ON (o.order_id = ol.order_id) 
INNER JOIN items i ON (i.item_id = ol.item_id)
GROUP BY c.city
ORDER BY total DESC

get the profit for each month this year

SELECT monthname(o.date_delivery), sum(ol.quantity * i.sell_price) AS total
FROM orders o INNER JOIN orderline ol ON (o.order_id = ol.order_id)
INNER JOIN items i ON (i.item_id = ol.item_id)
WHERE o.date_delivery BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY month(o.date_delivery)

regular expression

Select last_name from customers where binary last_name REGEXP "^S.*";
Select last_name from customers where binary last_name REGEXP ".*on.+";
Select last_name from customers where binary last_name REGEXP ".*on.+";
Select last_name from customers where binary last_name REGEXP ".*[on].*";
Select last_name from customers where binary last_name REGEXP "^[^SJ]";

Select last_name from customers where binary last_name REGEXP "^[A-Z_0-9]";

Select strcmp('foo', 'foo');
Select strcmp('foo', 'FOO');
Select strcmp('foo', binary 'FOO');
Select strcmp('foo', 'bar');
Select ceiling(2.2), floor(2.4),round(2.2)
Select name, MID(name,2), 
UPPER(name) 
FROM items where item_id = 6;

Select ASCII('A'),
Char(65,66,67),
Concat('hello',0x20,0x57, 'orld');


CREATE TABLE testcolcons (
  Colnotnull INT NOT NULL PRIMARY KEY, 
  Colprikey INT NOT NULL PRIMARY KEY,
  Coldefault  INT DEFAULT 42);

INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(1,1,1);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(2,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(NULL,3,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault) values(3,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey) values(3,3);

Create table ttconst (
  mykey1 INT, 
  mykey2 INT NOT NULL, 
  mystring varchar(15) NOT NULL,
  CONSTRAINT cs1 UNIQUE(mykey1), 
  CONSTRAINT cs2 PRIMARY KEY (mykey2,mystring));

  Insert into ttconst values(1,2, 'Amy Jones');
Insert into ttconst values(1,2, 'Dave jones');
Insert into ttconst values(2,2, 'Dave jones');
Insert into ttconst values(3,2, 'Amy Jones');

ALTER TABLE table-name ADD COLUMN column-name column-type
[first | after column name]
ALTER TABLE table-name DROP COLUMN  column-name
ALTER TABLE table-name CHANGE COLUMN column-name new-name new-type
ALTER TABLE old-table-name RENAME TO new-table-name
ALTER TABLE ADD PRIMARY KEY (column list)
ALTER TABLE DROP PRIMARY KEY

ALTER TABLE customers ADD COLUMN zipcode varchar(10) AFTER phone;
ALTER TABLE customers CHANGE COLUMN zipcode zipcode2 char(15);

ALTER TABLE customers CHANGE COLUMN 
	f_first_name first_name char(32) NOT NULL ;
ALTER TABLE customers ADD PRIMARY KEY (fname,lname);

CREATE TABLE orderinfo (
  orderinfo_id INT AUTO_INCREMENT NOT NULL PRIMARY KEY, 
  customer_id INT NOT NULL, 
  date_placed date NOT NULL, 
  date_shipped date, 
  shipping decimal(7,2),
  INDEX(customer_id),
	CONSTRAINT orderinfo_customer_id_fk FOREIGN KEY (customer_id) 
  REFERENCES customers(customer_id)
);

LOAD DATA [LOCAL] INFILE filename INTO TABLE tablename [FIELDS[TERMINATED BY 'char'] [ENCLOSED BY 'char'] [ESCAPED BY 'char']] [ LINES TERMINATED BY 'char']
	IGNORE n LINES ] [column1, column2,…

LOAD DATA LOCAL INFILE 'd:/itim130-s-2025/cust.txt' INTO TABLE customers FIELDS TERMINATED BY ',' (first_name, last_name, address, city, phone, zipcode2);

mysqlimport  –-local –-password –-user=root --fields-terminated-by=, --columns=first_name,last_name,address,city,phone,zipcode2 db_sales_s_2025  d:/itim130-s-2025/customer.txt 

Imports MySql.Data.MySqlClient
Public Class Form1
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;Database=db_sales_s_2025;User=root;Password=;")
    'Public dbconn As New MySqlConnection
    Public sql As String
    Public dbcomm As MySqlCommand
    Public dbread As MySqlDataReader
    Public DataAdapter1 As MySqlDataAdapter
    Public ds As DataSet
    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Try
            conn.Open()
            sql = "select * from customer"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "customer1")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "customer1"


        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim customer_id As Integer
        Try
            conn.Open()
            'MsgBox("database connected")
            customer_id = Val(TextBox1.Text)
            sql = "SELECT * FROM customer WHERE customer_id = " & customer_id
            dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
            dbread.Read()
            'TextBox2.Text = dbread("customer_id")
            TextBox2.Text = dbread("title")
            TextBox3.Text = dbread("lname")
            TextBox4.Text = dbread("fname")
            TextBox5.Text = dbread("addressline")
            TextBox6.Text = dbread("town")
            TextBox7.Text = dbread("zipcode")
            TextBox8.Text = dbread("phone")
        Catch ex As MySqlException
            MsgBox("no customer found")
            conn.Close()
        End Try
        conn.Close()
    End Sub

    Private Sub TextBox1_TextChanged(sender As Object, e As EventArgs) Handles TextBox1.TextChanged

    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
                sql = $"INSERT INTO customers (first_name, last_name, address, city, phone, zipcode2) VALUES ('{firstName}','{lastName}', '{address}', '{city}', '{phone}', '{zip}')"
            sql = "INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('" & title & "','" & firstName & "','" & lastName & "','" & address & "','" & town & "','" & zip & "','" & phone & "')"
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox("customer not created")
            conn.Close()
        End Try
        Label1.Text = sql
        conn.Close()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim customerId = Val(TextBox1.Text)
        Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
            sql = $"UPDATE customer SET title = '{title}', lname = '{lastName}', fname = '{firstName}', addressline = '{address}', town = '{town}', zipcode = '{zip}', phone= '{phone}' WHERE customer_id = {customerId}"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If

        Catch ex As Exception

        End Try
        conn.Close()

    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        Try
            conn.Open()
            Dim id As Integer = InputBox("enter customer id to be deleted", "delete record")
            Dim ans = MessageBox.Show("do you want to delete this record?", "record deleted", MessageBoxButtons.YesNoCancel)
            If ans = DialogResult.Yes Then
                sql = $"DELETE FROM customer WHERE customer_id = {id}"
                dbcomm = New MySqlCommand(sql, conn)
                Dim i As Integer = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("record deleted")
                Else
                    MsgBox("record not deleted")

                End If
            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        End Try
    End Sub
End Class

//items crud 
Try
            conn.Open()
            sql = "SELECT i.item_id AS 'id', i.name AS name, i.cost_price AS cost, i.sell_price as `SELling price`, s.quantity FROM items i INNER  JOIN stocks s ON (i.item_id = s.item_id) ORDER BY i.item_id DESC"
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i LEFT OUTER JOIN stock s ON i.item_id = s.item_id ORDER BY i.item_id DESC"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)
            conn.Close()

        End Try

        conn.Close()

 Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim i As Integer = 0
        Dim description As String = TextBox1.Text
        Dim costPrice As Decimal = TextBox2.Text
        Dim sellPrice As Decimal = TextBox3.Text
        Dim quantity As Integer = NumericUpDown1.Value

        Try
            conn.Open()
            sql = $"INSERT INTO item (description, cost_price, sell_price) VALUES('{description}', {costPrice}, {sellPrice})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
            sql = $"INSERT INTO stock (item_id, quantity) VALUES(last_insert_id(), {quantity})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        conn.Close()

Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim i As Integer = 0
        Dim description As String = TextBox1.Text
        Dim costPrice As Decimal = TextBox2.Text
        Dim sellPrice As Decimal = TextBox3.Text
        Dim quantity As Integer = NumericUpDown1.Value

        Try
            conn.Open()
            sql = $"INSERT INTO item (description, cost_price, sell_price) VALUES('{description}', {costPrice}, {sellPrice})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
            sql = $"INSERT INTO stock (item_id, quantity) VALUES(last_insert_id(), {quantity})"
            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
        conn.Close()
Private Sub TextBox4_TextChanged(sender As Object, e As EventArgs) Handles TextBox4.TextChanged
        Dim itemId = Val(TextBox4.Text)

        Try
            conn.Open()
            sql = $"SELECT i.item_id AS `item id`, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.item_id = {itemId}"
            dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
            dbread.Read()
            TextBox1.Text = dbread("description")
            TextBox2.Text = dbread("cost_price")
            TextBox3.Text = dbread("sell_price")
            NumericUpDown1.Value = dbread("quantity")
            TextBox7.Text = dbread("item id")

        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()

        End Try
        conn.Close()
    End Sub

  Private Sub TextBox5_TextChanged(sender As Object, e As EventArgs) Handles TextBox5.TextChanged
        Dim description As String = TextBox5.Text
        Try
            conn.Open()
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.description LIKE '%{description}%'"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try

        conn.Close()
    End Sub

    Private Sub TextBox6_TextChanged(sender As Object, e As EventArgs) Handles TextBox6.TextChanged
        Dim description As String = TextBox6.Text
        Try
            conn.Open()
            sql = "SELECT i.item_id, i.description, i.cost_price, i.sell_price, s.quantity FROM item i INNER JOIN stock s ON i.item_id = s.item_id WHERE i.description LIKE '%{description}%'"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "search_item")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "search_item"
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try

        conn.Close()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim itemId = Val(TextBox7.Text)
        Dim description = TextBox1.Text
        Dim costPrice = TextBox2.Text
        Dim sellPrice = TextBox3.Text
        Dim quantity = NumericUpDown1.Value
        Dim i As Integer = 0

        Try
            conn.Open()
            sql = $"UPDATE item SET description = '{description}', cost_price = {costPrice}, sell_price = {sellPrice} WHERE item_id = {itemId} "

            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If

            sql = $"UPDATE stock SET quantity = {quantity}  WHERE item_id = {itemId} "

            dbcomm = New MySqlCommand(sql, conn)
            i = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If


        Catch ex As MySqlException
            MsgBox(ex.Message)
        End Try
        conn.Close()
    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        Dim itemId = Val(TextBox7.Text)
        Dim i As Integer
        Try
            conn.Open()

            Dim ans = MessageBox.Show("do you want to delete this record?", "record deleted", MessageBoxButtons.YesNoCancel)
            If ans = DialogResult.Yes Then
                sql = $"DELETE FROM stock WHERE item_id = {itemId}"
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("stock deleted")
                Else
                    MsgBox("stock not deleted")

                End If
                sql = $"DELETE FROM item WHERE item_id = {itemId}"
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("record deleted")
                Else
                    MsgBox("record not deleted")

                End If
            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()

        End Try
        conn.Close()

CREATE TABLE stocks(
    item_id INT NOT NULL PRIMARY KEY,
    quantity INT,
    INDEX(item_id),
    CONSTRAINT stock_item_id_fk FOREIGN KEY (item_id)REFERENCES items(item_id)
)
ALTER table items DROP COLUMN quantity
INSERT INTO items(name, cost_price, sell_price, supplier_name)
VALUES('foo', 50.50, 65.00,  'bar');
INSERT INTO stocks(item_id, quantity) VALUES(LAST_INSERT_ID(), 10);
	
User Administration
Create new users using CREATE USER statement
CREATE USER user IDENTIFIED BY password

CREATE USER 'dbadmin1'@'localhost' IDENTIFIED BY 'p@ssw0rd';

allow user to connect from any host you use the % wildcard, which means any host.
CREATE USER superadmin9000@'%'
IDENTIFIED BY 'p@ssw0rd';

MySQL Changing Password for Accounts
USE mysql;
 
ALTER USER dbadmin1@localhost IDENTIFIED BY 'p@ssw0rd1234';
ALTER USER root@localhost IDENTIFIED BY 'your password';
 ALTER USER itim130s@localhost IDENTIFIED BY 'p@ssw0rd';
FLUSH PRIVILEGES; 

FLUSH PRIVILEGES statement to reload privileges from the grant table in the mysql database.

MySQL GRANT Statement Syntax
GRANT privileges (column_list)
ON [object_type] privilege_level
TO account [IDENTIFIED BY 'password']
 
GRANT ALL ON db_sales_s_2025.* to 'dbadmin1'@'localhost';
GRANT ALL ON db_sales_s_2025.* to 'itim130s'@'localhost';

GRANT ALL ON db_sales_s_2025.* to itim130s@'%' IDENTIFIED BY 'password';

GRANT SELECT (first_name,last_name)  ON db_sales_s_2025.customers to user500@localhost IDENTIFIED BY 'foo';
FLUSH PRIVILEGES;


GRANT SELECT, UPDATE, DELETE  ON db_sales_s_2025.items to user500@localhost 
SHOW GRANTS FOR user4;

GRANT SELECT ON <database name>.<view name> TO <user>@<host> IDENTIFIED BY '<password>

GRANT EXECUTE ON <database name>.<procedure name> TO <user>@<host> IDENTIFIED BY '<password>'

SHOW GRANTS FOR 'root';
REVOKE DELETE ON db_sales_s_2025.items from user500@localhost;
FLUSH PRIVILEGES;

mysql backup /restore using mysqldump
mysqldump -u [username] -p[password] [database_name,db2,db3...] > /path/to/[dump_file.sql]
mysql -u [uname] -p[pass] [db_to_restore] < [backupfile.sql]

/transaction
BEGIN;
UPDATE items SET cost_price = 100.00 WHERE item_id =13;
COMMIT;
ROLLBACK

BEGIN; 
SELECT * FROM customers WHERE customer_id = 45;
INSERT INTO orders(date_ordered, date_delivery, status, customer_id)
VALUES(now(), NULL, 'processing', 45);
INSERT INTO orderline (order_id, item_id, quantity)
VALUES(LAST_INSERT_ID(), 19, 2), (LAST_INSERT_ID(), 20, 4),(LAST_INSERT_ID(), 21, 10);

UPDATE stocks SET quantity = quantity - 2 WHERE item_id = 19;
UPDATE stocks SET quantity = quantity - 4 WHERE item_id = 20;
UPDATE stocks SET quantity = quantity - 10 WHERE item_id = 21;
COMMIT


Imports MySql.Data.MySqlClient
Public Class Form3
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;Database=itim130s;User=itim130s;Password=p@ssw0rd;")
    'Public dbconn As New MySqlConnection
    Public sql As String
    Public dbcomm As MySqlCommand
    Public dbread As MySqlDataReader
    Public DataAdapter1 As MySqlDataAdapter
    Public ds As DataSet
    Private Sub Form3_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Dim id As Integer = Val(Form1.TextBox1.Text)
        cbocid.SelectedText = id
        Try
            conn.Open()
            Sql = "SELECT * FROM customer"
            dbcomm = New MySqlCommand(Sql, conn)
            dbread = dbcomm.ExecuteReader()


            While dbread.Read()
                cbocid.Items.Add(dbread("customer_id"))

            End While
        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            conn.Close()
        End Try
        dbread.Close()

        Try
            Sql = "SELECT * FROM item i INNER JOIN stock s ON i.item_id = s.item_id"
            'sql = "SELECT * FROM item"
            dbcomm = New MySqlCommand(Sql, conn)
            dbread = dbcomm.ExecuteReader()
            While dbread.Read()
                cboitemid.Items.Add(dbread("item_id"))
            End While
        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            conn.Close()

        End Try
        dbread.Close()
        conn.Close()

    End Sub
End Class

Private Sub cboitemid_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboitemid.SelectedIndexChanged
        txtDescription.Clear()
        txtSellPrice.Clear()
        txtQty.Clear()

        'Dim itemId As Integer = Val(cboitemid.SelectedItem)
        Try
            conn.Open()
            sql = $"SELECT i.name, i.sell_price, s.quantity FROM items i INNER JOIN stocks s WHERE i.item_id = {Val(cboitemid.SelectedItem)}"
            dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
            dbread.Read()
            txtdescription.Text = dbread("name")
            txtSellPrice.Text = dbread("sell_price")
            txtQty.Text = Val(dbread("quantity"))
        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            conn.Close()

        End Try
        dbread.Close()
        conn.Close()
    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        DataGridView1.Rows.Add(Val(cboitemid.SelectedItem), txtdescription.Text, Convert.ToDecimal(txtSellPrice.Text), Val(txtQty.Text))
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
        DataGridView1.SelectionMode = DataGridViewSelectionMode.FullRowSelect
        If DataGridView1.SelectedRows.Count > 0 Then
            'you may want to add a confirmation message, and if the user confirms delete
            DataGridView1.Rows.Remove(DataGridView1.SelectedRows(0))
        Else
            MessageBox.Show("Select 1 row before you hit Delete")
        End If
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim total As Decimal = 0.0

        For Each row As DataGridViewRow In DataGridView1.Rows
            total += (row.Cells("sell_price").Value * row.Cells("qty").Value)

        Next
        Label1.Text = total
    End Sub

Dim i As Integer = 0
        Dim customerId As Integer = Val(cbocid.Text)
        Dim myTrans As MySqlTransaction

        Try
            conn.Open()
            myTrans = conn.BeginTransaction()
            sql = $"INSERT INTO orders (customer_id, date_ordered, date_delivery, status) VALUES({customerId}, now(), '{Convert.ToDateTime(DateTimePicker1.Value).ToString("yyyy-MM-dd")}', 'processing')"
            Label2.Text = sql
            dbcomm = New MySqlCommand(sql, conn)

            i = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If

            For Each row As DataGridViewRow In DataGridView1.Rows
                sql = $"INSERT INTO orderline (order_id, item_id, quantity) VALUES(last_insert_id(), {row.Cells("item_id").Value}, {row.Cells("qty").Value} )"
                Label1.Text = sql
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery
                If (i > 0) Then
                    MsgBox("record saved")
                Else
                    MsgBox("record not saved")

                End If
                sql = $"UPDATE stocks SET quantity = quantity - {Val(row.Cells("qty").Value)} WHERE item_id = {Val(row.Cells("item_id").Value)}"
                dbcomm = New MySqlCommand(sql, conn)
                i = dbcomm.ExecuteNonQuery
                If (i > 0) Then
                    MsgBox("record saved")
                Else
                    MsgBox("record not saved")

                End If

            Next
            myTrans.Commit()
        Catch ex As MySqlException
            MsgBox(ex.Message)
            myTrans.Rollback()
            conn.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            myTrans.Rollback()
            conn.Close()

        End Try
        conn.Close()


Imports MySql.Data.MySqlClient
Public Class Form4

    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;Database=itim130s;User=itim130s;Password=p@ssw0rd;")
    'Public dbconn As New MySqlConnection
    Public sql As String
    Public dbcomm As MySqlCommand
    Public dbread As MySqlDataReader
    Public DataAdapter1 As MySqlDataAdapter
    Public ds As DataSet
    Private Sub Form4_Load(sender As Object, e As EventArgs) Handles MyBase.Load

        Try
            conn.Open()
            'select customer name address orderid total
            'SELECT ol.order_id, sum(ol.quantity * i.sell_price) AS total
            'From items i INNER Join orderline ol ON (i.item_id = ol.item_id)
            'Group By ol.order_id
            sql = $"SELECT concat(c.first_name, c.last_name) as name, ol.order_id, sum(ol.quantity * i.sell_price) AS total FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN orderline ol ON o.order_id = ol.order_id INNER JOIN items i ON i.item_id = ol.item_id GROUP BY ol.order_id"

            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "orders")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "orders"
            Dim cmb As New DataGridViewComboBoxColumn()
            cmb.HeaderText = "status"
            cmb.Name = "cmb"

            cmb.Items.Add("processing")
            cmb.Items.Add("Delivered")
            cmb.Items.Add("canceled")
            Dim btn As New DataGridViewButtonColumn
            btn.HeaderText = "submit"
            btn.Text = "update"
            btn.Name = "btn"
            btn.UseColumnTextForButtonValue = True

            DataGridView1.Columns.Add(cmb)
            DataGridView1.Columns.Add(btn)
        Catch ex As MySqlException
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)
            conn.Close()
        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)
            conn.Close()

        End Try

        conn.Close()

    End Sub

    Private Sub DataGridView1_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView1.CellContentClick

    End Sub
End Class


Private Sub DataGridView1_CellContentClick(sender As Object, e As DataGridViewCellEventArgs) Handles DataGridView1.CellContentClick
        If e.ColumnIndex >= 0 AndAlso e.RowIndex >= 0 Then
            TextBox1.Text = DataGridView1.Rows(e.RowIndex).Cells(0).Value.ToString
            TextBox2.Text = DataGridView1.Rows(e.RowIndex).Cells(1).Value.ToString
        End If


    End Sub

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Try
            conn.Open()
            sql = $"UPDATE orders SET status = '{ComboBox1.SelectedItem.ToString}' WHERE order_id = {Val(TextBox2.Text)}"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery
            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If

        Catch ex As MySqlException
            MsgBox(ex.Message)
            conn.Close()
        Catch ex As Exception
            MsgBox(ex.Message)
            conn.Close()

        End Try

        conn.Close()
    End Sub

1.	Fetch all students and their respective course that live in USA.
SELECT s.last_name, c.course_id, c.title, c.address
FROM courses c INNER JOIN students s ON c.course_id = s.course_id
WHERE s.address = 'usa'

2. Fetch all students, the subjects they enrolled and the grades they received.

SELECT st.last_name, st.first_name, su.code, su.name, ss.grade
FROM subjects su INNER JOIN student_subjects ss ON su.subject_id = ss.subject_id INNER JOIN students st ON st.student_id = ss.student_id

3.	Fetch all students with “reyes” on their last name.

SELECT last_name
FROM students
WHERE last_name LIKE '%reyes%'

4.	Create a new BSIT student.
INSERT INTO (course_id, last_name, first_name, address)
VALUES(1, 'FOO', 'bar', 'taguig')

5.	enroll the newly created student to the subject  ITCP329.
INSERT INTO student_subject (student_id, subject_id, grade) 
VALUES(10, 6, NULL)

6.	Update the grade of the newly created student to “1.75”.

UPDATE student_subject SET grade = 1.75
WHERE student_id = 10

7.	Fetch all students with a grade of “5.0” in the subject ITIM130

SELECT st.last_name, st.first_name, su.code, su.name, ss.grade
FROM subjects su INNER JOIN student_subjects ss ON su.subject_id = ss.subject_id INNER JOIN students st ON st.student_id = ss.student_id
WHERE ss.grade = '5.0' AND ss.subject_id = 1
WHERE ss.grade = '5.0' AND su.code = 'itim130'
WHERE ss.grade = 5.0 AND su.name = 'rdbms'

8.	Delete all students from the USA or from Canada.

DELETE 
FROM students
WHERE address = 'usa' OR address = 'canada'
WHERE address IN ('usa', 'canada')


9.	Get all students that are enrolled in MATH1.
SELECT st.last_name, st.first_name, su.code, su.name, 
FROM subjects su INNER JOIN student_subjects ss ON su.subject_id = ss.subject_id INNER JOIN students st ON st.student_id = ss.student_id
WHERE ss.subject_id = 2 AND su.name = 'MATH1'
WHERE su.name = 'MATH1'

Change the number of units of Machine design subject to 3
UPDATE subjects SET units = '3.0'
WHERE subject_id = 4
WHERE code = 'MEPL 413'
